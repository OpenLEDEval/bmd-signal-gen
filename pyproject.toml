[project]
name = "bmd-signal-generator"
version = "0.1.0"
description = "Cross-platform BMD signal generator for Blackmagic Design DeckLink devices with HDR metadata support"
authors = [
    { name = "Ritchie Argue", email = "ritchie@doequalsglory.com" },
    { name = "Tucker Downs", email = "tucker@tjdcs.dev" },
]
maintainers = [
    { name = "Ritchie Argue", email = "doequalsglory@gmail.com" },
    { name = "Tucker Downs", email = "tucker@tjdcs.dev" },
]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.13,<3.14"
keywords = [
    "blackmagic",
    "decklink",
    "video",
    "signal-generator",
    "test-patterns",
    "hdr",
    "broadcast",
    "video-production",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: BSD License",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: C++",
    "Topic :: Multimedia :: Video",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware :: Hardware Drivers",
]
dependencies = [
    "numpy>=2.3.1",
    "fastapi>=0.111.0",
    "pydantic>=2.7.1",
    "pyyaml>=6.0.1",
    "uvicorn>=0.35.0",
    "typer>=0.16,<0.17",
    "rich>=14.0.0",
    "aenum>=3.1.16",
    "requests>=2.32.4",
]

[project.urls]
Homepage = "https://github.com/OpenLEDEval/bmd-signal-gen"
Repository = "https://github.com/OpenLEDEval/bmd-signal-gen.git"
Documentation = "https://bmd-signal-gen.readthedocs.io/"
Issues = "https://github.com/OpenLEDEval/bmd-signal-gen/issues"
Changelog = "https://github.com/OpenLEDEval/bmd-signal-gen/blob/main/CHANGELOG.md"

[project.scripts]
bmd-signal-gen = "bmd_sg.cli.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["bmd_sg"]
include = ["LICENSE"]
exclude = ["data/", "cpp/", "tests/", "**/*CLAUDE.md"]

[dependency-groups]
dev = [
    "invoke>=2.2.0",
 "pre-commit>=4.2.0",
 "pyright>=1.1.403",
 "pytest>=8.4.1",
 "ruff>=0.12.3",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
]

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.lint.pydocstyle]
convention = "numpy"


[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "C90", # mccabe complexity
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501", # Line too long (handled by formatter)
    "B008", # Do not perform function calls in argument defaults
    "T201", # Print found (allow for debugging)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "T20"]
"scripts/*" = ["T201"]

[tool.ruff.lint.isort]
known-first-party = ["bmd_sg"]
split-on-trailing-comma = true


[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.pyright]
include = ["bmd_sg", "tests"]
exclude = ["**/__pycache__"]
venvPath = "."
venv = ".venv"
pythonVersion = "3.13"
typeCheckingMode = "standard"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportInconsistentConstructor = true
reportMissingParameterType = true
reportMissingReturnType = true
reportUnnecessaryTypeIgnoreComment = true
reportMissingModuleSource = false
reportUnboundVariable = false
reportUnnecessaryCast = true
reportUnnecessaryTypeIgnorComment = true
reportUnsupportedDunderAll = false
reportUnusedExpression = false
